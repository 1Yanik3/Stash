// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x", "darwin-arm64"]
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ClusterType {
  normal
  collection
  screenshots
  stories
  withName
}

model Clusters {
  id   Int         @id @default(autoincrement())
  name String      @unique
  icon String
  type ClusterType

  sortOrder Int @default(0) // TODO: why?

  stories       Story[]
  Media         Media[]
  CollapsedTags CollapsedTags[]

  credentials Credentials[]

  @@index([name])
}

enum CountAttribute {
  solo
  two
  three
  group
  unknown
}

model Media {
  id          String   @id @default(uuid())
  type        String
  name        String
  date        DateTime @default(now())
  createdDate DateTime @default(now())

  height       Int
  width        Int
  tags         String[]
  source       String? // TODO
  content_hash String?

  favourited     Boolean        @default(false)
  countAttribute CountAttribute @default(unknown) // TODO

  // Link to cluster
  cluster    Clusters? @relation(fields: [clustersId], references: [id])
  clustersId Int

  // Grouped with other media
  groupedInto        GroupedIntoNames? @relation(fields: [groupedIntoNamesId], references: [id])
  groupedIntoNamesId Int?

  @@index([id, clustersId, tags])
}

model TagIcons {
  tag  String @unique
  icon String
}

model CollapsedTags {
  tag String @unique

  Cluster    Clusters @relation(fields: [clustersId], references: [id])
  clustersId Int

  @@index([tag])
}

model GroupedIntoNames {
  id    Int     @id @default(autoincrement())
  name  String
  Media Media[]
}

model Story {
  id      String   @id @default(uuid())
  cluster Clusters @relation(fields: [clusterId], references: [id])
  date    DateTime @default(now())

  title   String
  content String
  source  String @default("Unknown")

  clusterId Int
}

model Credentials {
  id                Int        @id @default(autoincrement())
  username          String     @unique
  hash              String
  salt              String
  permittedClusters Clusters[]
  Session           Session[]
}

model Session {
  id            Int         @id @default(autoincrement())
  token         String
  createdAt     DateTime    @default(now())
  expiresAt     DateTime
  credential    Credentials @relation(fields: [credentialsId], references: [id])
  credentialsId Int
}

enum JobStatus {
  created
  running
  completed
  failed
  invalid
}

model Job {
  id                   Int       @id @default(autoincrement())
  name                 String
  status               JobStatus @default(created)
  data                 String    @default("{}")
  completionPercentage Int?
  createdAt            DateTime  @default(now())
  debugMessages        String[]
}
